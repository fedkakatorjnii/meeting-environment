version: "3.3"

services:
  SERVER:
    image: meeting_nginx
    restart: unless-stopped
    ports:
      - 3000:80
    working_dir: /opt/app
    volumes:
      - ./app:/opt/app
    depends_on:
      - SERVER_DEV
      - DB
      - REDIS
  DB:
    image: meeting_db
    restart: unless-stopped
    env_file:
      - db.env
    expose:
      - "5432"
    ports:
      - 5435:5432
    volumes:
      - ./db:/var/lib/postgresql/data
  REDIS:
    image: "redis:alpine"
    restart: unless-stopped
    ports:
      - "6379:6379"
    expose:
      - 6379
  MIGRATION_DEV:
    image: meeting_backend
    working_dir: /opt/app/backend
    command: >
      sh -c "yarn
             yarn run mi:run"
    volumes:
      - ./app:/opt/app
    env_file:
      - backend_dev.env
    depends_on:
      - DB
  INSTALL_BACK:
    image: meeting_backend
    working_dir: /opt/app/backend
    command: >
      sh -c "yarn"
    volumes:
      - ./app:/opt/app
    env_file:
      - backend_dev.env
  INSTALL_FRONT:
    image: meeting_frontend
    working_dir: /opt/app/frontend
    command: >
      sh -c "yarn"
    volumes:
      - ./app:/opt/app
    env_file:
      - frontend_dev.env
  EMPTY_BACK:
    image: meeting_backend
    working_dir: /opt/app/backend
    volumes:
      - ./app:/opt/app
    env_file:
      - backend_dev.env
  EMPTY_FRONT:
    image: meeting_frontend
    working_dir: /opt/app/frontend
    volumes:
      - ./app:/opt/app
    env_file:
      - frontend_dev.env
  SERVER_DEV:
    image: meeting_backend
    restart: unless-stopped
    working_dir: /opt/app/backend
    command: >
      sh -c "yarn run start:dev"
    volumes:
      - ./app:/opt/app
    env_file:
      - backend_dev.env
    expose:
      - "3000"
    ports:
      - 0.0.0.0:3000:3000
    depends_on:
      - DB
      - REDIS
  FRONTEND_DEV:
    image: meeting_frontend
    restart: unless-stopped
    working_dir: /opt/app/frontend
    command: >
      sh -c "yarn run start"
    volumes:
      - ./app:/opt/app
    env_file:
      - frontend_dev.env
    ports:
      - 0.0.0.0:8080:8080
    depends_on:
      - SERVER_DEV
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
  broker:
    image: confluentinc/cp-kafka:7.3.2
    container_name: broker
    ports:
      # To learn about configuring Kafka for access across networks see
      # https://www.confluent.io/blog/kafka-client-cannot-connect-to-broker-on-aws-on-docker-etc/
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
